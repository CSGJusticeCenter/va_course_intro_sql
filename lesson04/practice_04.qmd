---
title: "Lesson 4: Working with Multiple Tables"
engine: knitr
filters:
  - interactive-sql
databases:
  - name: state_doc
    path: "https://raw.githubusercontent.com/CSGJusticeCenter/va_data/main/courses/intro_sql/state_doc.db"  
---


## Learning Check

1. What is the purpose of a `JOIN` statememt in SQL?

    a. To filter data from a single table
    b. To combine rows from two or more tables based on a related column
    c. To calculate aggregates like SUM and AVG
    d. To sort query results alphabetically
    
    
    ***Correct Answer: B***


2. A `LEFT JOIN` returns all records from the left table and only matching records from the right table. *(TRUE/FALSE)*

    ***Correct Answer: TRUE ***


3. Which of the following are reasons to use table aliases in SQL joins? (Select all that apply)

    a. To make queries easier to read
    b. To avoid typing full table names repeatedly
    c. To speed up query execution
    d. To comply with SQL syntax rules
    
    ***Correct Answers: A, B ***


4. Match the type of JOIN to what it returns.

| **JOIN Type** | **Result** | 
|---------|:-----|
| INNER JOIN      | A. All records from both tables, with NULLs where there’s no match   |
| LEFT JOIN     | B. Only matching records in both tables |
| FULL OUTER JOIN      |  C. All records from the left table and matched records from the right     |

***Correct Answer: ***

| **JOIN Type** | **Result** | 
|---------|:-----|
| INNER JOIN      | B. Only matching records in both tables   |
| LEFT JOIN     | C. All records from the left table and matched records from the right  |
| FULL OUTER JOIN      | A. All records from both tables, with NULLs where there’s no match       |






## Exercise

![](images/corrections_erd.png)

1. You’ve been asked to generate a report listing all residents who are currently missing an expected release date. Your query should include the resident ID, first and last name, facility name, and admission date. Sort the results so the earliest admission appears first. You can refer to the ERD above to review table structure and column names.



```{.sql .interactive .state_doc}

```



<details>
<summary>Show the answer</summary>

```{.sql .interactive .state_doc}
SELECT r.resident_id,
       r.first_name,
       r.last_name,
       f.facil_name,
       i.admission_date
FROM intakes AS i
LEFT JOIN residents AS r 
  ON i.resident_id = r.resident_id
LEFT JOIN facilities AS f 
  ON i.facil_id = f.facil_id
WHERE i.exp_release_date IS NULL
ORDER BY i.admission_date;
```

- The goal is to list all residents with missing `exp_release_date` values, and we need to match residents with their intakes.

- A `LEFT JOIN` ensures that every resident is included, even if there's no matching intake.

##

2. A facility administrator wants to understand where residents admitted to the Western State Correctional Facility are coming from. Write a query to show the number of residents admitted from each county. Sort the results in order from highest to lowest admissions. You can refer to the ERD above to review table structure and column names.

```{.sql .interactive .state_doc}

```


<details>
<summary>Show the answer</summary>

```{.sql .interactive .state_doc}
SELECT c.county_name,
       COUNT(*) AS admission_count
FROM intakes AS i
INNER JOIN counties AS c 
  ON i.county_id = c.county_id
INNER JOIN facilities AS f 
  ON i.facil_id = f.facil_id
WHERE f.facil_name = 'Western State Correctional Facility'
GROUP BY c.county_name
ORDER BY admission_count DESC;
```

- This query focuses on counting admissions **where we have a matching county and facility**.

- We're interested only in records that are **fully matched across** `intakes`, `facilities`, and   `counties`, so `INNER JOIN` is appropriate.



